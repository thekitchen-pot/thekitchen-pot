---
import Layout from './Layout.astro';
import { siteConfig } from '@/data/site';
import { Icon } from 'astro-icon/components';
import { Picture } from 'astro:assets';

import Breadcrumbs from '../components/ui/Breadcrumbs.astro';
import { slugify } from '@/utils/slugify';
// import { Image } from 'astro:assets';
// import ShareButtons from '../components/ShareButtons.astro';
import AuthorBio from '../components/AuthorBio.astro';
import '../styles/blog-content.css';

// authur import
import postsWithAuthors from "../lib/postsWithAuthors"; // Assuming you export this logic

const authorPost = postsWithAuthors[0]; // Example for a single post

let article = true; // Set based on some condition or metadata

import authorImg from "@/data/assets/images/founder.jpeg"


interface Author {
    name: string;
    title: string;
    image: string;
    bio: string;
    url:string;
    credentials: string[];
    socialLinks: {
        twitter?: string;
        linkedin?: string;
    };
}


// End of Author Import

const { frontmatter, entry } = Astro.props;

function getCurrentFormattedDate() {
    const currentDate = new Date();
    const isoString = currentDate.toISOString(); // Format: YYYY-MM-DDTHH:mm:ss.sssZ
    const timezoneOffset = currentDate.getTimezoneOffset(); // Get timezone offset in minutes

    // Calculate the timezone in hours
    const timezoneHours = -timezoneOffset / 60;
    const timezoneString = `UTC${timezoneHours >= 0 ? '+' : ''}${Math.abs(timezoneHours).toString().padStart(2, '0')}:00`;

    return {
        dateTimeValue: isoString,
        timezone: timezoneString,
    };
}


function formatDate(dateString: string | undefined) {
  if (!dateString) return '';
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}


// Schema.org Article markup
const currentDateInfo = getCurrentFormattedDate();
const articleSchema = {
    "@context": "https://schema.org",
    "@type": "Article",
    "@id": `${Astro.request.url}#article`,
    "url": Astro.request.url,
    headline: frontmatter.title,
    description: frontmatter.description,
    image: frontmatter.image.src,
    datePublished: frontmatter.pubDate,
    dateModified: currentDateInfo.dateTimeValue, // Use datetimevalue for dateModified
    author: {
        "@type": "Person",
        '@id': `${siteConfig.url}${siteConfig.baseAuthorSlug}${slugify(frontmatter.author)}/#author`,
        name: frontmatter.author,
        jobTitle: authorPost.author?.jobTitle,
        description: authorPost.author?.bio,
        url: authorPost.author?.url,
        sameAs: authorPost.author?.sameAs,
    },
    publisher: {
        "@type": "Organization",
        name: siteConfig.name,
        '@id': `${siteConfig.url}/#organization`,
        logo: {
            "@type": "ImageObject",
            url: "https://thekitchenpot.com/logo.png",
        },
    },
    mainEntityOfPage: {
        "@type": "WebPage",
        "@id": Astro.url.href,
        breadcrumb: {
          "@type": 'BreadcrumbList',
          '@id': `${Astro.request.url}#rich-snippet`
        }
    },
};

const { tags } = frontmatter; // Assuming you're using frontmatter to get article data
const monthYear = new Date().toLocaleDateString('en-US', {
  month: 'long',
  year: 'numeric'
});
---

<Layout title={`${frontmatter.title} | ${monthYear}`} article={article}>
  <script
        type="application/ld+json"
        set:html={JSON.stringify(articleSchema)}
    />
  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <header class="mb-8">

      <Breadcrumbs classes="mb-6 mx-auto jusify-center jusify-items-center " tags={tags} />
      <h1 class="text-4xl sm:text-5xl font-bold mb-4 text-gray-900">{frontmatter.title}</h1>
      <div class="flex items-center text-gray-600 mb-4">
        <Icon name="mdi:calendar" class="w-5 h-5 mr-2 text-teal-600" />
        <time datetime={frontmatter.modDate}>{formatDate(frontmatter.modDate)}</time>
        {frontmatter.author && (
          <>
            <span class="mx-2">â€¢</span>
            <Icon name="mdi:account" class="w-5 h-5 text-teal-600 mr-2" />
            <a
              href={`/authors/boniface-muriuki/`}
              class="text-gray-600 hover:text-teal-600 transition-colors"
            >
              {frontmatter.author}
            </a>
          </>
        )}
      </div>
      {frontmatter.tags && frontmatter.tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {frontmatter.tags.map((tag: string) => (
            <a href={`/blog/tag/${tag}/`} class="bg-teal-100 text-teal-900 px-3 py-1 rounded-full text-sm hover:bg-teal-200 transition-colors">
              {tag}
            </a>
          ))}
        </div>
      )}
    </header>

{frontmatter.image && (
  <Picture
    src={frontmatter.image}
    alt={frontmatter.title}
    height={frontmatter.image.height / 2}
    width={frontmatter.image.width / 2}
    
    inferSize={true}
    formats={['webp', 'avif']}
    loading="eager"
    class=" object-cover w-full rounded-lg mb-8 shadow-lg"
  />
)}

    <div class="blog-content prose dark:prose-invert">
      <slot />
    </div>
    <div>

<section class="mt-12 pt-8 border-t border-gray-200" >
      <div class="flex flex-wrap justify-between items-center">
        <div class="w-full sm:w-auto mb-4 sm:mb-0">
          <h2 class="text-xl font-semibold mb-2">Share this article</h2>
          <div class="flex space-x-4">
            <a href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(frontmatter.title)}&url=${encodeURIComponent(String(Astro.url))}`} target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:text-blue-600 transition-colors">
    <Icon name="mdi:twitter" class="w-6 h-6" />
    <span class="sr-only">Share on Twitter</span>
    </a>

            <a href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(String(Astro.url))}`} target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 transition-colors">
  <Icon name="mdi:facebook" class="w-6 h-6" />
  <span class="sr-only">Share on Facebook</span>
            </a>
            <a href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(String(Astro.url))}&title=${encodeURIComponent(frontmatter.title)}`} target="_blank" rel="noopener noreferrer" class="text-blue-700 hover:text-blue-900 transition-colors">
  <Icon name="mdi:linkedin" class="w-6 h-6" />
  <span class="sr-only">Share on LinkedIn</span>
</a>
          </div>
        </div>
        <div class="w-full sm:w-auto">
          <h2 class="text-xl font-semibold mb-2">Tags</h2>
          <div class="flex flex-wrap gap-2">
            {frontmatter.tags && frontmatter.tags.map((tag: string) => (
              <a href={`/blog/tag/${tag}`} class="bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-gray-300 transition-colors">
                {tag}
              </a>
            ))}
          </div>
        </div>
      </div>
    </section>
    </div>
    <AuthorBio
    name={frontmatter.author}
    image={authorImg.src}
    bio={frontmatter.authorBio}
    url={authorPost.author?.url}
    socialLinks={{
        twitter: authorPost.author?.sameAs?.find(link => link.includes('twitter')),
        linkedin: authorPost.author?.sameAs?.find(link => link.includes('linkedin')),
        website: authorPost.author?.url
    }}
/>

  </article>
</Layout>
<style is:global>
  .cta-button {
  display: inline-block;
  padding: 10px 20px;
  background-color: #08dbff;
  color: rgb(25, 2, 2);
  text-decoration: none;
  border-radius: 5px;
}

.cta-button:hover {
  background-color: #bf6606;
  color: #e7f6f8fa
}
</style>